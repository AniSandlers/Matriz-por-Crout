#Primero defino mi matriz y el vector de soluciones en base a la ecuacion dada

matrix = [[4, 1, 2, -1],
          [3, -1, 0, 2],
          [2, 2, 4, -1],
          [1, -1, -1, 3]]

solutions = [20, 8, 16, 6]

#Aquí el codigo de Matriz por Crout
#Defino aquí una función llamada crout
#Toma como argumentos la matriz y el vector de soluciones
def crout(matrix, solutions):
    # Tamaño de la matriz donde casumo que es una matriz cuadrada.
    n = len(matrix)

    # Inicializo las matrices de L y U
    # Es decir, las matrices que se van a obtener en la descomposición de la matriz original
    L = [[0.0] * n for i in range(n)]
    U = [[0.0] * n for i in range(n)]

    # Descomposición de la matriz en L y U
    #Para resumir esto, se calculan los elementos de la diagonal y por encima de la diagonal de U
    #Y los elementos por debajo de la diagonal de L. Los elementos de la diagonal de L se fijan en 1.0
    for i in range(n):
        # Elementos por debajo de la diagonal de L
        for j in range(i, n):
            sum_lu = sum(L[j][k]*U[k][i] for k in range(i))
            L[j][i] = matrix[j][i] - sum_lu

        # Elementos de la diagonal y por encima de la diagonal de U
        for j in range(i, n):
            if i == j:
                U[i][i] = 1.0
            else:
                sum_lu = sum(L[i][k]*U[k][j] for k in range(i))
                U[i][j] = (matrix[i][j] - sum_lu) / L[i][i]

    #Resolver el sistema de ecuaciones
    
    #Primero, resolvo L*y = b por sustitución hacia adelante
    #Se resuelve el sistema Ly = b por sustitución hacia adelante
    #Y luego se resuelve el sistema Ux = y por sustitución hacia atrás, pan comido.
    y = [0.0] * n
    for i in range(n):
        y[i] = solutions[i]
        for j in range(i):
            y[i] -= L[i][j] * y[j]
        y[i] /= L[i][i]

    # Luego, resuelvo U*x = y por sustitución hacia atrás
    x = [0.0] * n
    for i in range(n-1, -1, -1):
        x[i] = y[i]
        for j in range(i+1, n):
            x[i] -= U[i][j] * x[j]
        x[i] /= U[i][i]
    #Finalmente, se devuelve el vector de soluciones x
    return x

#Imprimo aqui la funcion crout y pues listo
result = crout(matrix, solutions)
print(result)
#Fin
